// Write find() or aggregate() statements to return the following data
use("2ND_ASSIGNMENT");

// 1. All books by an author
db.books.find({ authors: "Sam" }, { isbn: 1 });

// 2. Total price of an order
db.orders.find(
	{ _id: ObjectId("622f33f5c5390f00117389f3") },
	{ total_price: 1 }
);

// 3. Total sales (in £) to a customer
use("2ND_ASSIGNMENT");
db.orders.aggregate([
	{
		$group: {
			_id: "$customer_id",
			total_price: { $sum: totalPrice },
			averageOrderQuantity: { $avg: { $size: "$books" } }
		}
	}
]);

// 4. Books that are categorized as neither fiction nor non-fiction
use("2ND_ASSIGNMENT");
db.categories.find({
	$or: [
		{ name: { $not: { $eq: "Fiction" } } },
		{ name: { $not: { $eq: "Non-Fiction" } } }
	]
});

// 5. Average page count by genre
use("2ND_ASSIGNMENT");
db.books.aggregate([
	{
		$group: {
			_id: "$genres",
			avg_pages: { $avg: "$price" },
			no_of_books_in_genre: { $count: {} }
		}
	}
]);

// 6. Categories that have no sub-categories
db.categories.find({ sub_categories: { $size: 0 } });

// 7. ISBN numbers of books with more than one author
db.books.find({ "authors.1": { $exists: true } });

// 8. ISBN numbers of books that sold at least X copies (you decide the value for X)
use("2ND_ASSIGNMENT");
let x = 5;
db.orders.aggregate([
	{
		$unwind: "$books"
	},
	{
		$group: {
			_id: "$books.isbn",
			copies_sold: { $sum: "$books.quantity" }
		}
	},
	{
		$match: {
			copies_sold: { $gt: x }
		}
	}
]);

// 9. Number of copies of each book sold – unsold books should show as 0 sold copies.
use("2ND_ASSIGNMENT");
db.books
	.aggregate([
		{
			$lookup: {
				from: "orders",
				let: {
					order_isbn: "$isbn"
				},
				pipeline: [
					{
						$unwind: "$books"
					},
					{
						$match: {
							$expr: {
								$eq: ["$books.isbn", "$$order_isbn"]
							}
						}
					},
					{
						$group: {
							_id: "$books.isbn",
							total_amount: { $sum: "$books.quantity" }
						}
					}
				],
				as: "CopiesSold"
			}
		},
		{
			$unwind: {
				path: "$CopiesSold",
				preserveNullAndEmptyArrays: true
			}
		},
		{
			$project: {
				_id: 0,
				title: 1,
				CopiesSold: {
					$ifNull: ["$CopiesSold.total_amount", "$total_amount", 0]
				}
			}
		}
	])
	.pretty();

// 10. Best-selling books: The top 10 selling books ordered in descending order by number of sales.
use("2ND_ASSIGNMENT");
db.orders
	.aggregate([
		{
			$unwind: "$books"
		},
		{
			$lookup: {
				from: "books",
				localField: "books.isbn",
				foreignField: "isbn",
				as: "CopiesSold"
			}
		},
		{
			$group: {
				_id: { title: "$CopiesSold.title" },
				CopiesSold: { $sum: "$books.quantity" }
			}
		},
		{
			$sort: {
				CopiesSold: -1
			}
		}
	])
	.pretty();

// 11. Best-selling genres: The top 3 selling genres ordered in descending order by number of sales.
use("2ND_ASSIGNMENT");
db.orders
	.aggregate([
		{
			$unwind: "$books"
		},
		{
			$lookup: {
				from: "books",
				let: {
					books_isbn: "$books.isbn"
				},
				pipeline: [
					{
						$match: {
							$expr: {
								$eq: ["$isbn", "$$books_isbn"]
							}
						}
					},
					{
						$unwind: "$genres"
					}
				],
				as: "CopiesSold"
			}
		},
		{
			$unwind: "$CopiesSold"
		},
		{
			$group: {
				_id: { genre: "$CopiesSold.genres" },
				CopiesSold: { $sum: "$books.quantity" }
			}
		},
		{
			$limit: 3
		},
		{
			$sort: { CopiesSold: -1 }
		}
	])
	.pretty();

// 12. All science fiction books. Note: Books in science fiction subcategories like cyberpunk also count as science fiction. Don’t use your knowledge of the concrete category structure. (Hint: $graphLookup)
use("2ND_ASSIGNMENT");
db.categories
	.aggregate([
		{
			$match: {
				name: { $eq: "Fiction" }
			}
		},
		{
			$lookup: {
				from: "books",
				localField: "_id",
				foreignField: "categories",
				as: "ParentBooks"
			}
		},
		{
			$graphLookup: {
				from: "categories",
				startWith: "$sub_categories",
				connectFromField: "sub_categories",
				connectToField: "name",
				as: "ParentSubCategories"
			}
		},
		{
			$lookup: {
				from: "books",
				localField: "ParentSubCategories._id",
				foreignField: "categories",
				as: "SubclassBooks"
			}
		},
		{
			$project: {
				name: 1,
				BooksFromCategory: {
					$concatArrays: ["$ParentBooks", "$SubclassBooks"]
				}
			}
		}
	])
	.pretty();
// 13. Characters used in science fiction books. Note from (12) applies here as well.

// 14. Number of books in each category including books in subcategories.
