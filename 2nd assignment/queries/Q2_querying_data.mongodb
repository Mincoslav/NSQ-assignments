// Write find() or aggregate() statements to return the following data
use("2ND_ASSIGNMENT");

// 1. All books by an author
db.books.find({ authors: "Sam" }, { isbn: 1, title: 1 });

// 2. Total price of an order
db.orders.find(
	{ _id: ObjectId("622f33f5c5390f00117389f3") },
	{ total_price: 1 }
);

// 3. Total sales (in £) to a customer
use("2ND_ASSIGNMENT");
db.orders.aggregate([
	{
		$group: {
			_id: "$customer_id",
			total_price: { $sum: "$total_price" },
		}
	}
]);

// 4. Books that are categorized as neither fiction nor non-fiction
use("2ND_ASSIGNMENT");
db.books.aggregate( [
	{
		$unwind: "$categories"
	},
	{
		$lookup:
			{
				from: "categories",
				let: {
					books_id: "$categories"
				},
				pipeline: [
					{
						$match: {
							$expr: {
								$eq: ["$_id", "$$books_id"]
							},
						$or: [
							{ parent_categories: { $eq: "Fiction"  } },
							{ sub_categories: { $eq: "Fiction"  } }
						]
						}
					}
				],
				as: "BooksInFiction"
			}
	}
] ).pretty()



// 5. Average page count by genre
use("2ND_ASSIGNMENT");
db.books.aggregate([
	{
		$group: {
			_id: "$genres",
			avg_pages: { $avg: "$price" },
			no_of_books_in_genre: { $count: {} }
		}
	}
]);

// 6. Categories that have no sub-categories
db.categories.find({ sub_categories: { $size: 0 } });

// 7. ISBN numbers of books with more than one author
db.books.find({ "authors.1": { $exists: true } });

// 8. ISBN numbers of books that sold at least X copies (you decide the value for X)
use("2ND_ASSIGNMENT");
let x = 5;
db.orders.aggregate([
	{
		$unwind: "$books"
	},
	{
		$group: {
			_id: "$books.isbn",
			copies_sold: { $sum: "$books.quantity" }
		}
	},
	{
		$match: {
			copies_sold: { $gt: x }
		}
	}
]);

// 9. Number of copies of each book sold – unsold books should show as 0 sold copies.
db.books.aggregate( [
	{
		$lookup:
			{
				from: "orders",
				let: {
					order_isbn: "$isbn"
				},
				pipeline: [
					{ 
						$unwind: "$books"
					},
					{
						$match: {
							$expr: {
								$eq: ["$books.isbn", "$$order_isbn"]
							}
						}
					},
					{					
						$group: {
							_id: "$books.isbn",
							total_amount: { $sum: "$books.quantity"},
						}
					}
				],
				as: "CopiesSold"
			}
	},
	{
		$unwind: 
		{
			path: "$CopiesSold",
			preserveNullAndEmptyArrays: true
		} 
	},
	{
		$project:
		{
			_id: 0,
			title: 1,
			CopiesSold: {$ifNull: ["$CopiesSold.total_amount", "$total_amount", 0]}
		}
	},
	{
		$sort: {CopiesSold: -1}
	}
] ).pretty()

// 10. Best-selling books: The top 10 selling books ordered in descending order by number of sales.
db.orders.aggregate([
	{
		$unwind: "$books"
	},
	{
		$lookup: {
		  from: "books",
		  localField: 'books.isbn',
		  foreignField: 'isbn',
		  as: 'CopiesSold'
		}
	},
	{
		$unwind: "$CopiesSold"
	},
	{
		$group:{
			_id: "$CopiesSold.title",
			CopiesSold: { $sum: "$books.quantity"}
		}
	},
	{
		$sort:{
			CopiesSold: -1
		}
	},
	{
		$limit: 10
	}
]).pretty()

// 11. Best-selling genres: The top 3 selling genres ordered in descending order by number of sales.
db.orders.aggregate([
	{
		$unwind: "$books"
	},
	{
		$lookup:
         {
            from: "books",
            localField: "books.isbn",
            foreignField: "isbn",
            as: "CopiesSold"
        }
	},
	{
		$unwind: "$CopiesSold"
	},
	{
		$unwind: "$CopiesSold.genres"
	},
	{
		$group: {
			_id: "$CopiesSold.genres",
			CopiesSold: { $sum: "$books.quantity"}
		}
	},
	{
		$sort: {CopiesSold: -1} 
	},
	{
		$limit: 3
	}
]).pretty()

// 12. All science fiction books. Note: Books in science fiction subcategories like cyberpunk also count as science fiction. Don’t use your knowledge of the concrete category structure. (Hint: $graphLookup)
db.categories.aggregate([
	{
		$match: {
		  name: { $eq: "Science Fiction"}
		}
	},
	{
		$lookup:
         {
            from: "books",
            localField: "_id",
            foreignField: "categories",
            as: "ParentBooks"
        }
	},
	{
		$graphLookup: {
			from: "categories",
			startWith: "$sub_categories",
			connectFromField: "sub_categories",
			connectToField: "name",
			as: "ParentSubCategories"
		},
	},
	{
      $lookup:
         {
            from: "books",
            localField: "ParentSubCategories._id",
            foreignField: "categories",
            as: "SubclassBooks"
        }
	},
	{
		$project:{
			name: 1,
			BooksInCategory: {$concatArrays: ["$ParentBooks", "$SubclassBooks"]}
		}
	}
]).pretty()

// 13. Characters used in science fiction books. Note from (12) applies here as well.
db.categories.aggregate([
	{
		$match: {
		  name: { $eq: "Science Fiction"}
		}
	},
	{
		$lookup:
         {
            from: "books",
            localField: "_id",
            foreignField: "categories",
            as: "ParentBooks"
        }
	},
	{
		$graphLookup: {
			from: "categories",
			startWith: "$sub_categories",
			connectFromField: "sub_categories",
			connectToField: "name",
			as: "ParentSubCategories"
		},
	},
	{
      $lookup:
         {
            from: "books",
            localField: "ParentSubCategories._id",
            foreignField: "categories",
            as: "SubclassBooks"
        }
	},
	{
		$project:{
			BooksFromCategory: {$concatArrays: ["$ParentBooks", "$SubclassBooks"]}
		}
	},
	{
		$unwind: "$BooksFromCategory"
	},
	{
		$unwind: "$BooksFromCategory.characters"
	},
	{
		$group: {
			_id: {characters: "$BooksFromCategory.characters"}
		}
	}
]).pretty()

// 14. Number of books in each category including books in subcategories.
db.categories.aggregate([
	{
		$match: {
		  parent_categories: { $size: 0}
		}
	},
	{
		$lookup:
         {
            from: "books",
            localField: "_id",
            foreignField: "categories",
            as: "ParentBooks"
        }
	},
	{
		$graphLookup: {
			from: "categories",
			startWith: "$sub_categories",
			connectFromField: "sub_categories",
			connectToField: "name",
			as: "ParentSubCategories"
		},
	},
	{
      $lookup:
         {
            from: "books",
            localField: "ParentSubCategories._id",
            foreignField: "categories",
            as: "SubclassBooks"
        }
	},
	{
		$project:{
			_id: 0,
			name: 1,
			BooksInCategory: {$size: {$concatArrays: ["$ParentBooks", "$SubclassBooks"]}}
		}
	},
	{
		$sort: {BooksInCategory: -1}
	}
]).pretty()